diff --git a/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/service/AbstractService.java b/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/service/AbstractService.java
index eeea1e1..f58f45e 100644
--- a/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/service/AbstractService.java
+++ b/hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/service/AbstractService.java
@@ -24,6 +24,8 @@ import java.util.List;
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
+import org.apache.hadoop.ipc.Server;
+import org.apache.hadoop.yarn.webapp.WebApp;
 
 public abstract class AbstractService implements Service {
 
@@ -163,4 +165,104 @@ public abstract class AbstractService implements Service {
       l.stateChanged(this);
     }
   }
+
+
+  /**
+   * Provide the service name and state in the toString() operator.
+   * @return the service name and state
+   */
+  @Override
+  public String toString() {
+    return "Service " + super.toString()
+        + " name \"" + (getName() != null? getName() : "") + ""
+        + " in state " + state;
+  }
+
+  /**
+   * Stop a service; if it is null do nothing.
+   *
+   * @param service a service
+   */
+  protected static void stopService(Service service) {
+    ServiceOperations.stop(service);
+  }
+
+  /**
+   * Stop a service; if it is null do nothing.
+   * Exceptions are caught and logged
+   * (but not Throwables). This operation is intended to be used in cleanup
+   * operations
+   *
+   * @param service a service; may be null
+   * @return any exception that was caught
+   */
+  public static Exception stopServiceQuietly(Service service) {
+    return ServiceOperations.stopQuietly(service);
+  }
+
+  /**
+   * Helper method for safely interrupting threads during shutdown.
+   * If the target is non null, it will be interrupted. The return
+   * value will always be null. This permits a use such as
+   * <pre>
+   *   workerThread = interruptThread(workerThread);
+   * </pre>
+   * Such a line will interrupt the worker thread if it is not null,
+   * and guarantee that the field will be null afterwards.
+   * @param target target thread -this may be null
+   * @return null, always
+   */
+  protected static Thread interruptThread(Thread target) {
+    if (target != null) {
+      target.interrupt();
+    }
+    return null;
+  }
+
+  /**
+   * Helper method for safely interrupting threads during shutdown.
+   * If the target is non null, it will be interrupted -then the caller
+   * uses {@link Thread#join()} to wait for it to finish -or for
+   * the wait to be interrupted.
+   * 
+   * @param target target thread -this may be null
+   * @return null, always
+   */
+  protected static Thread interruptAndJoinThread(Thread target) {
+    if (target != null) {
+      target.interrupt();
+      try {
+        target.join();
+      } catch (InterruptedException ie) {
+        LOG.info(target.getName() + " interrupted during join ",
+                 ie);
+      }
+    }
+    return null;
+  }
+
+  /**
+   * Helper method to safely stop an IPC server if not null.
+   * @param target the target server
+   * @return null, always
+   */
+  protected static Server stopIPCServer(Server target) {
+    if (target != null) {
+      target.stop();
+    }
+    return null;
+  }
+
+  /**
+   * Helper method to safely stop a webapp if not null.
+   * @param target the target server
+   * @return null, always
+   */
+  protected static WebApp stopWebApp(WebApp target) {
+    if (target != null) {
+      target.stop();
+    }
+    return null;
+  }
+
 }

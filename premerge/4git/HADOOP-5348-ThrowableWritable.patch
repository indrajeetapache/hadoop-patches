diff --git a/src/java/org/apache/hadoop/io/ThrowableWritable.java b/src/java/org/apache/hadoop/io/ThrowableWritable.java
new file mode 100644
index 0000000..ab84ada
--- /dev/null
+++ b/src/java/org/apache/hadoop/io/ThrowableWritable.java
@@ -0,0 +1,299 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.io;
+
+import java.io.DataInput;
+import java.io.DataOutput;
+import java.io.IOException;
+
+
+/**
+ * This provides for a wire form of a chain of {@link Throwable} instances,
+ * retaining class name, stack trace, message and any chained exceptions,
+ * each of which is also turned into a ThrowableWritable instance.
+ *
+ * No attempt is made to turn these back into Throwable instances afterwards,
+ * because history (RMI, SOAP Stacks) has shown this does not work reliably.
+ * It requires everyone to have the same version of every possible exception
+ * that can be raised, including server-side things the JDBC drivers. When
+ * deserialization fails instead of getting useful information about what
+ * went wrong at the far end, you just get a new exception telling you that
+ * something went wrong at the far end, but the program cannot tell you
+ * what it was.
+ */
+public final class ThrowableWritable implements Writable {
+
+  /** throwable classname */
+  private String classname;
+
+  /** throwable message */
+  private String message;
+
+  /** cause: may be null */
+  private ThrowableWritable cause;
+
+  /**
+   * Stack trace as string; will be null when an empty element is created,
+   * otherwise it will be an array of length zero.
+   */
+  private String[] stack;
+
+
+  /**
+   * Empty constructor.
+   * Only use this when you are planning to deserialize data, as the object is
+   * otherwise incomplete.
+   */
+  public ThrowableWritable() {
+  }
+
+
+  /**
+   * Construct a lightweight throwable writeable with no stack trace; and the
+   * message passed in
+   *
+   * @param message message to use
+   */
+  public ThrowableWritable(String message) {
+    this.message = message;
+    stack = new String[0];
+    classname = "";
+  }
+
+  /**
+   * recursively construct from a throwable chain.
+   *
+   * @param thrown The throwable chain to build this writeable from.
+   */
+  public ThrowableWritable(Throwable thrown) {
+    classname = thrown.getClass().getName();
+    message = thrown.getMessage();
+
+    StackTraceElement[] st = thrown.getStackTrace();
+    if (st != null) {
+      int sl = st.length;
+      stack = new String[sl];
+      for (int i = 0; i < sl; i++) {
+        stack[i] = st[i].toString();
+      }
+    } else {
+      stack = new String[0];
+    }
+    Throwable rootCause = thrown.getCause();
+    if (rootCause != null && rootCause != thrown) {
+      cause = new ThrowableWritable(rootCause);
+    }
+  }
+
+  /**
+   * Copy constructor.
+   *
+   * @param that the original instance to copy
+   */
+  public ThrowableWritable(ThrowableWritable that) {
+    classname = that.classname;
+    message = that.message;
+    //copy stack trace
+    if (that.stack == null) {
+      stack = new String[0];
+    } else {
+      int l = that.stack.length;
+      stack = new String[l];
+      System.arraycopy(that.stack, 0, stack, 0, l);
+    }
+    //copy any nested cause
+    if (that.cause != null) {
+      cause = new ThrowableWritable(that.cause);
+    }
+  }
+
+
+  /**
+   * Get the classname of the underlying throwable
+   *
+   * @return the classname of the original throwable
+   */
+  public String getClassname() {
+    return classname;
+  }
+
+  /**
+   * Get the text string this instance was constructed with
+   *
+   * @return the message of the underlying throwable
+   */
+  public String getMessage() {
+    return message;
+  }
+
+  /**
+   * Get any nested cause of the exception
+   *
+   * @return any nested cause as another ThrowableWritable -or null
+   */
+  public ThrowableWritable getCause() {
+    return cause;
+  }
+
+  /**
+   * Get the stack trace of the original throwable. It may be of size 0.
+   *
+   * @return the stack trace converted to strings
+   */
+  public String[] getStack() {
+    return stack;
+  }
+
+
+  /**
+   * determine (recursively) the depth of this Throwable chain
+   *
+   * @return a number equal to or greater than 1
+   */
+  public int getDepth() {
+    return 1 + (cause == null ? 0 : cause.getDepth());
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @param out <code>DataOutput</code> to serialize this object into.
+   *
+   * @throws IOException IO trouble
+   */
+  public void write(DataOutput out) throws IOException {
+    out.writeUTF(classname);
+    out.writeUTF(message);
+    if (stack != null) {
+      out.writeInt(stack.length);
+      for (String call : stack) {
+        out.writeUTF(call);
+      }
+    } else {
+      out.writeInt(0);
+    }
+    //look for a cause
+    boolean hasCause = cause != null;
+    out.writeBoolean(hasCause);
+    if (hasCause) {
+      //recursively write it
+      cause.write(out);
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @param in <code>DataInput</code> to deseriablize this object from.
+   *
+   * @throws IOException IO trouble
+   */
+  public void readFields(DataInput in) throws IOException {
+    classname = in.readUTF();
+    message = in.readUTF();
+    int stackLength = in.readInt();
+    if (stack == null || stack.length != stackLength) {
+      //create a new stack array
+      stack = new String[stackLength];
+    }
+    //read in the stack
+    for (int i = 0; i < stackLength; i++) {
+      stack[i] = in.readUTF();
+    }
+    //look for any nested cause
+    boolean hasCause = in.readBoolean();
+    if (hasCause) {
+      if (cause == null) {
+        cause = new ThrowableWritable();
+      }
+      cause.readFields(in);
+    }
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * @throws CloneNotSupportedException this should not happen
+   */
+  @SuppressWarnings({"CloneDoesntCallSuperClone"})
+  @Override
+  protected Object clone() throws CloneNotSupportedException {
+    return new ThrowableWritable(this);
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * The classname and message are used for equality
+   */
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
+    }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+
+    ThrowableWritable that = (ThrowableWritable) o;
+
+    if (classname != null
+        ? !classname.equals(that.classname)
+        : that.classname != null) {
+      return false;
+    }
+    return !(message != null
+        ? !message.equals(that.message)
+        : that.message != null);
+  }
+
+  /**
+   * {@inheritDoc}
+   *
+   * The classname and message are used in the hash
+   */
+  @Override
+  public int hashCode() {
+    int result = classname != null ? classname.hashCode() : 0;
+    result = 31 * result + (message != null ? message.hashCode() : 0);
+    return result;
+  }
+
+  /**
+   * Return the classname and message in the format classname: message The
+   * output is designed to resemble that of {@link Throwable#toString()} if the
+   * message and classname are both set. If only the message is set, only that
+   * is printed.
+   *
+   * @return a string representation of the object.
+   */
+  @Override
+  public String toString() {
+    StringBuilder builder = new StringBuilder();
+    if (classname != null) {
+      builder.append(classname);
+      if (!classname.isEmpty()) {
+        builder.append(": ");
+      }
+    }
+    if (message != null) {
+      builder.append(message);
+    }
+    return builder.toString();
+  }
+}
diff --git a/src/test/core/org/apache/hadoop/io/TestThrowableWritable.java b/src/test/core/org/apache/hadoop/io/TestThrowableWritable.java
new file mode 100644
index 0000000..0c50ed3
--- /dev/null
+++ b/src/test/core/org/apache/hadoop/io/TestThrowableWritable.java
@@ -0,0 +1,243 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.io;
+
+import junit.framework.Assert;
+import org.junit.BeforeClass;
+import org.junit.Test;
+
+import java.io.IOException;
+
+/**
+ * Test that the {@link ThrowableWritable} class works as intended:
+ * that it can be used to serialize an exception chain, and that
+ * that result is retained.
+ * <p/>
+ * <i>Important</i>: if the class is renamed, the constant
+ * {@link #CLASSNAME} must be changed too.
+ */
+public class TestThrowableWritable extends Assert {
+
+  /**
+   * This is our classname, looked for in stack traces.
+   * <i>Important</i>: if the class is renamed, this constant must be changed too.
+   */
+  private static final String CLASSNAME = "TestThrowableWritable";
+
+  private static ThrowableWritable simple, messageOnly, chained, empty;
+  private static final String SIMPLE = "simple";
+  private static final String MESSAGE_ONLY = "messageOnly";
+  private static final String OUTER = "outer";
+  private static final String INNER = "inner";
+
+  public TestThrowableWritable() {
+  }
+
+  /**
+   * {@inheritDoc}
+   */
+  @BeforeClass
+  public static void beforeClass() throws Exception {
+
+    simple = new ThrowableWritable(new Throwable(SIMPLE));
+    messageOnly = new ThrowableWritable(MESSAGE_ONLY);
+    empty = new ThrowableWritable();
+    Throwable thrown = new Throwable(OUTER,
+                                     new IOException(INNER));
+    chained = new ThrowableWritable(thrown);
+  }
+
+  /**
+   *
+   * @param instance ThrowableWritable to check
+   */
+  private void assertEmptyStack(ThrowableWritable instance) {
+    assertNotNull(instance);
+    assertEquals(0, instance.getStack().length);
+  }
+
+  /**
+   * Test that copy and cloning works
+   * @param instance ThrowableWritable to check
+   * @throws CloneNotSupportedException if cloning fails
+   */
+  private void assertCopyWorks(ThrowableWritable instance) throws CloneNotSupportedException {
+    assertNotNull(instance);
+    Object cloned = instance.clone();
+    ThrowableWritable copy = new ThrowableWritable(instance);
+    assertEquals(cloned, copy);
+    assertEquals(instance, copy);
+    assertEquals(instance.hashCode(), copy.hashCode());
+    assertEquals(instance.getDepth(), copy.getDepth());
+  }
+
+  /**
+   * Assert that there is a stack in the ThrowableWritable, and that it has at
+   * least one entry, containing this test class's classname.
+   * @param instance ThrowableWritable to check
+   */
+  private void assertStackSetUp(ThrowableWritable instance) {
+    assertNotNull(instance);
+    assertTrue(instance.getStack().length > 0);
+    String topEntry = instance.getStack()[0];
+    assertTrue("No stack in " + topEntry,
+               topEntry.contains(CLASSNAME));
+  }
+
+  /**
+   * Assert that the message in a ThrowableWritable matches exactly the message
+   * expected
+   * @param message expected message
+   * @param instance ThrowableWritable to check
+   */
+  private void assertMessageEquals(String message, ThrowableWritable instance) {
+    assertNotNull(instance);
+    assertEquals(message, instance.getMessage());
+  }
+
+  /**
+   * Assert that the depth fo an instance
+   * @param depth
+   * @param instance ThrowableWritable to check
+   */
+  private void assertDepth(int depth, ThrowableWritable instance) {
+    assertNotNull(instance);
+    assertEquals(depth, instance.getDepth());
+  }
+
+  /**
+   * Assert that at a classname is the classname field of a ThrowableWritable
+   * @param classname part of a classname to look for
+   * @param instance the instance which must not be null, or have a null classname field
+   */
+  private void assertClassnameContains(String classname, ThrowableWritable instance) {
+    assertNotNull(instance);
+    assertNotNull(instance.getClassname());
+    assertContains(classname, instance.getClassname());
+  }
+
+  /**
+   * Assert that the expected string is in the source text
+   * @param expected string to look for
+   * @param source source string -must not be null
+   */
+  private void assertContains(String expected, String source) {
+    assertNotNull(source);
+    assertTrue("Did not find " + expected + " in " + source, source.contains(expected));
+  }
+
+  /**
+   * Close any non-null closeable item
+   * @param closeable something to close -can be null
+   * @throws IOException if the close went wrong
+   */
+  private void close(java.io.Closeable closeable) throws IOException {
+    if (closeable != null) {
+      closeable.close();
+    }
+  }
+
+  /**
+   * assertion: check that can write and then read a source
+   *
+   * @param source any writable source
+   * @throws IOException on IO problems
+   */
+  private void assertRoundTrips(Writable source) throws IOException {
+    DataOutputBuffer out = null;
+    DataInputBuffer in = null;
+    ThrowableWritable dest;
+    try {
+      out = new DataOutputBuffer();
+      in = new DataInputBuffer();
+      out.reset();
+      source.write(out);
+      in.reset(out.getData(), out.getLength());
+      dest = new ThrowableWritable();
+      dest.readFields(in);
+    } finally {
+      close(in);
+      close(out);
+    }
+    assertEquals(source, dest);
+  }
+
+  /**
+   * Test case
+   *
+   * @throws Throwable on any failure
+   */
+  @Test
+  public void testEmptyInstance() throws Throwable {
+    assertNotNull(empty.toString());
+    assertNull(empty.getClassname());
+    assertEquals(empty, empty);
+    assertNull(empty.getMessage());
+    assertCopyWorks(empty);
+    assertDepth(1, empty);
+  }
+
+  /**
+   * Test case
+   *
+   * @throws Throwable on any failure
+   */
+  @Test
+  public void testSimple() throws Throwable {
+    assertMessageEquals(SIMPLE, simple);
+    assertClassnameContains("Throwable", simple);
+    assertStackSetUp(simple);
+    assertDepth(1, simple);
+    assertCopyWorks(simple);
+    assertRoundTrips(simple);
+  }
+
+  /**
+   * Test case
+   *
+   * @throws Throwable on any failure
+   */
+  @Test
+  public void testMessageOnly() throws Throwable {
+    assertMessageEquals(MESSAGE_ONLY, messageOnly);
+    assertEmptyStack(messageOnly);
+    assertDepth(1, messageOnly);
+    assertCopyWorks(messageOnly);
+    assertRoundTrips(messageOnly);
+  }
+
+  /**
+   * Test case: check that chained throwables can be written/read
+   *
+   * @throws Throwable on any failure
+   */
+  @Test
+  public void testChained() throws Throwable {
+    assertContains(OUTER, chained.toString());
+    assertClassnameContains("Throwable", chained);
+    assertStackSetUp(chained);
+    assertDepth(2, chained);
+    assertCopyWorks(chained);
+    ThrowableWritable cause = chained.getCause();
+    assertContains(INNER, cause.toString());
+    assertClassnameContains("IOException", cause);
+    assertRoundTrips(chained);
+  }
+
+}

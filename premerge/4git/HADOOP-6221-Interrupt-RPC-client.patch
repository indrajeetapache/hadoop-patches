diff --git a/src/java/org/apache/hadoop/ipc/Client.java b/src/java/org/apache/hadoop/ipc/Client.java
index d16170c..cb2afcf 100644
--- a/src/java/org/apache/hadoop/ipc/Client.java
+++ b/src/java/org/apache/hadoop/ipc/Client.java
@@ -35,6 +35,7 @@ import java.io.BufferedOutputStream;
 import java.io.FilterInputStream;
 import java.io.InputStream;
 import java.io.OutputStream;
+import java.io.InterruptedIOException;
 
 import java.security.PrivilegedExceptionAction;
 import java.util.Hashtable;
@@ -633,7 +634,11 @@ public class Client {
       // otherwise back off and retry
       try {
         Thread.sleep(1000);
-      } catch (InterruptedException ignored) {}
+      } catch (InterruptedException interrupted) {
+        throw (IOException) new InterruptedIOException(
+            "Interrupted while waiting to retry connecting to "+ server)
+            .initCause(ioe);
+      }
       
       LOG.info("Retrying connect to server: " + server + 
           ". Already tried " + curRetries + " time(s).");
@@ -1083,6 +1088,8 @@ public class Client {
       return (SocketTimeoutException)new SocketTimeoutException(
            "Call to " + addr + " failed on socket timeout exception: "
                       + exception).initCause(exception);
+    } else if (exception instanceof InterruptedIOException) {
+        return exception;
     } else {
       return (IOException)new IOException(
            "Call to " + addr + " failed on local exception: " + exception)
diff --git a/src/java/org/apache/hadoop/ipc/RPC.java b/src/java/org/apache/hadoop/ipc/RPC.java
index b42b913..4945db7 100644
--- a/src/java/org/apache/hadoop/ipc/RPC.java
+++ b/src/java/org/apache/hadoop/ipc/RPC.java
@@ -292,12 +292,19 @@ public class RPC {
       if (System.currentTimeMillis()-timeout >= startTime) {
         throw ioe;
       }
+      if (Thread.interrupted()) {
+        //interrupted during some IO; this may not have been caught
+        throw new InterruptedIOException(
+            "Interrupted waiting for the proxy");
+      }
 
       // wait for retry
       try {
         Thread.sleep(1000);
       } catch (InterruptedException ie) {
-        // IGNORE
+        throw (IOException) new InterruptedIOException(
+            "Interrupted waiting for the proxy")
+            .initCause(ioe);
       }
     }
   }
diff --git a/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java b/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java
index f48d2d2..f737d89 100644
--- a/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java
+++ b/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java
@@ -335,7 +335,13 @@ abstract class SocketIOWithTimeout {
             return ret;
           }
           
-          /* Sometimes select() returns 0 much before timeout for 
+          if (Thread.currentThread().isInterrupted()) {
+            throw new InterruptedIOException("Interrupted while waiting for " +
+                                             "IO on channel " + channel +
+                                             ". " + timeout +
+                                             " millis timeout left.");
+          }
+          /* Sometimes select() returns 0 much before timeout for
            * unknown reasons. So select again if required.
            */
           if (timeout > 0) {
@@ -345,12 +351,6 @@ abstract class SocketIOWithTimeout {
             }
           }
           
-          if (Thread.currentThread().isInterrupted()) {
-            throw new InterruptedIOException("Interruped while waiting for " +
-                                             "IO on channel " + channel +
-                                             ". " + timeout + 
-                                             " millis timeout left.");
-          }
         }
       } finally {
         if (key != null) {
diff --git a/src/test/core/org/apache/hadoop/ipc/TestRPCWaitForProxy.java b/src/test/core/org/apache/hadoop/ipc/TestRPCWaitForProxy.java
new file mode 100644
index 0000000..54a5c15
--- /dev/null
+++ b/src/test/core/org/apache/hadoop/ipc/TestRPCWaitForProxy.java
@@ -0,0 +1,110 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.ipc;
+
+import junit.framework.Assert;
+import org.junit.Test;
+import org.apache.hadoop.net.NetUtils;
+import org.apache.hadoop.conf.Configuration;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+
+import java.net.InetSocketAddress;
+import java.net.ConnectException;
+import java.io.IOException;
+import java.io.InterruptedIOException;
+
+/**
+ * tests that the proxy can be interrupted
+ */
+public class TestRPCWaitForProxy extends Assert {
+  private static final String ADDRESS = "0.0.0.0";
+
+  private static final Log LOG =
+      LogFactory.getLog(TestRPCWaitForProxy.class);
+
+  private static Configuration conf = new Configuration();
+
+  /**
+   * This tests that the time-bounded wait for a proxy operation works, and
+   * times out.
+   * @throws Throwable any exception other than that which was expected
+   */
+  @Test
+  public void testWaitForProxy() throws Throwable {
+    RpcThread worker = new RpcThread(0);
+    worker.start();
+    worker.join();
+    Throwable caught = worker.getCaught();
+    assertNotNull("No exception was raised", caught);
+    if (!(caught instanceof ConnectException)) {
+      throw caught;
+    }
+
+  }
+
+  /**
+   * This test sets off a blocking thread and then interrupts it, before
+   * checking that the thread was interrupted
+   * @throws Throwable any exception other than that which was expected
+   */
+  @Test
+  public void testInterruptedWaitForProxy() throws Throwable {
+    RpcThread worker = new RpcThread(10000);
+    worker.start();
+    worker.interrupt();
+    worker.join();
+    Throwable caught = worker.getCaught();
+    assertNotNull("No exception was raised", caught);
+    if (!(caught instanceof InterruptedIOException)) {
+      throw caught;
+    }
+  }
+
+
+  /**
+   * This thread waits for a proxy for the specified timeout, and retains
+   * any throwable that was raised in the process
+   */
+
+  private class RpcThread extends Thread {
+    private Throwable caught;
+    private long timeout;
+
+    private RpcThread(long timeout) {
+      this.timeout = timeout;
+    }
+
+    @Override
+    public void run() {
+      try {
+        RPC.waitForProxy(TestRPC.TestProtocol.class,
+                         TestRPC.TestProtocol.versionID,
+                         new InetSocketAddress(ADDRESS, 20),
+                         conf,
+                         timeout);
+      } catch (Throwable throwable) {
+        caught = throwable;
+      }
+    }
+
+    public Throwable getCaught() {
+      return caught;
+    }
+  }
+}

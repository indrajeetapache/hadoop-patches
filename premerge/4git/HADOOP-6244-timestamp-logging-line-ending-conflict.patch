diff --git a/src/java/org/apache/hadoop/metrics/file/FileContext.java b/src/java/org/apache/hadoop/metrics/file/FileContext.java
index ed53e91..9007e43 100644
--- a/src/java/org/apache/hadoop/metrics/file/FileContext.java
+++ b/src/java/org/apache/hadoop/metrics/file/FileContext.java
@@ -1,154 +1,236 @@
-/*
- * FileContext.java
- *
- * Licensed to the Apache Software Foundation (ASF) under one
- * or more contributor license agreements.  See the NOTICE file
- * distributed with this work for additional information
- * regarding copyright ownership.  The ASF licenses this file
- * to you under the Apache License, Version 2.0 (the
- * "License"); you may not use this file except in compliance
- * with the License.  You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.apache.hadoop.metrics.file;
-
-import java.io.BufferedOutputStream;
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
-import java.io.PrintWriter;
-
-import org.apache.hadoop.classification.InterfaceAudience;
-import org.apache.hadoop.classification.InterfaceStability;
-import org.apache.hadoop.metrics.ContextFactory;
-import org.apache.hadoop.metrics.spi.AbstractMetricsContext;
-import org.apache.hadoop.metrics.spi.OutputRecord;
-
-/**
- * Metrics context for writing metrics to a file.<p/>
- *
- * This class is configured by setting ContextFactory attributes which in turn
- * are usually configured through a properties file.  All the attributes are
- * prefixed by the contextName. For example, the properties file might contain:
- * <pre>
- * myContextName.fileName=/tmp/metrics.log
- * myContextName.period=5
- * </pre>
- * @deprecated use {@link org.apache.hadoop.metrics2.sink.FileSink} instead.
- */
-@InterfaceAudience.Public
-@InterfaceStability.Evolving
-@Deprecated
-public class FileContext extends AbstractMetricsContext {
-    
-  /* Configuration attribute names */
-  @InterfaceAudience.Private
-  protected static final String FILE_NAME_PROPERTY = "fileName";
-  @InterfaceAudience.Private
-  protected static final String PERIOD_PROPERTY = "period";
-    
-  private File file = null;              // file for metrics to be written to
-  private PrintWriter writer = null;
-    
-  /** Creates a new instance of FileContext */
-  @InterfaceAudience.Private
-  public FileContext() {}
-    
-  @InterfaceAudience.Private
-  public void init(String contextName, ContextFactory factory) {
-    super.init(contextName, factory);
-        
-    String fileName = getAttribute(FILE_NAME_PROPERTY);
-    if (fileName != null) {
-      file = new File(fileName);
-    }
-        
-    parseAndSetPeriod(PERIOD_PROPERTY);
-  }
-
-  /**
-   * Returns the configured file name, or null.
-   */
-  @InterfaceAudience.Private
-  public String getFileName() {
-    if (file == null) {
-      return null;
-    } else {
-      return file.getName();
-    }
-  }
-    
-  /**
-   * Starts or restarts monitoring, by opening in append-mode, the
-   * file specified by the <code>fileName</code> attribute,
-   * if specified. Otherwise the data will be written to standard
-   * output.
-   */
-  @InterfaceAudience.Private
-  public void startMonitoring()
-    throws IOException 
-  {
-    if (file == null) {
-      writer = new PrintWriter(new BufferedOutputStream(System.out));
-    } else {
-      writer = new PrintWriter(new FileWriter(file, true));
-    }
-    super.startMonitoring();
-  }
-    
-  /**
-   * Stops monitoring, closing the file.
-   * @see #close()
-   */
-  @InterfaceAudience.Private
-  public void stopMonitoring() {
-    super.stopMonitoring();
-        
-    if (writer != null) {
-      writer.close();
-      writer = null;
-    }
-  }
-    
-  /**
-   * Emits a metrics record to a file.
-   */
-  @InterfaceAudience.Private
-  public void emitRecord(String contextName, String recordName, OutputRecord outRec) {
-    writer.print(contextName);
-    writer.print(".");
-    writer.print(recordName);
-    String separator = ": ";
-    for (String tagName : outRec.getTagNames()) {
-      writer.print(separator);
-      separator = ", ";
-      writer.print(tagName);
-      writer.print("=");
-      writer.print(outRec.getTag(tagName));
-    }
-    for (String metricName : outRec.getMetricNames()) {
-      writer.print(separator);
-      separator = ", ";
-      writer.print(metricName);
-      writer.print("=");
-      writer.print(outRec.getMetric(metricName));
-    }
-    writer.println();
-  }
-    
-  /**
-   * Flushes the output writer, forcing updates to disk.
-   */
-  @InterfaceAudience.Private
-  public void flush() {
-    writer.flush();
-  }
-}
+/*
+ * FileContext.java
+ *
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.hadoop.metrics.file;
+
+import java.io.BufferedOutputStream;
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.PrintWriter;
+
+import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.classification.InterfaceStability;
+import org.apache.hadoop.metrics.ContextFactory;
+import org.apache.hadoop.metrics.MetricsException;
+import org.apache.hadoop.metrics.spi.AbstractMetricsContext;
+import org.apache.hadoop.metrics.spi.OutputRecord;
+
+/**
+ * Metrics context for writing metrics to a file.<p/>
+ *
+ * This class is configured by setting ContextFactory attributes which in turn
+ * are usually configured through a properties file.  All the attributes are
+ * prefixed by the contextName. For example, the properties file might contain:
+ * <pre>
+ * myContextName.fileName=/tmp/metrics.log
+ * myContextName.period=5
+ * </pre>
+ * @deprecated use {@link org.apache.hadoop.metrics2.sink.FileSink} instead.
+ */
+@InterfaceAudience.Public
+@InterfaceStability.Evolving
+@Deprecated
+public class FileContext extends AbstractMetricsContext {
+    
+  /* Configuration attribute names */
+  @InterfaceAudience.Private
+  protected static final String FILE_NAME_PROPERTY = "fileName";
+  @InterfaceAudience.Private
+  protected static final String PERIOD_PROPERTY = "period";
+  static final String NEWSTYLE_PROPERTY = "newStyle";
+  private static final boolean DEFAULT_NEW_STYLE = true;
+    
+  private File file = null;              // file for metrics to be written to
+  private PrintWriter writer = null;
+  private boolean useNewStyleOutput;
+    
+  /** Creates a new instance of FileContext */
+  @InterfaceAudience.Private
+  public FileContext() {}
+    
+  @InterfaceAudience.Private
+  public void init(String contextName, ContextFactory factory) {
+    super.init(contextName, factory);
+        
+    String fileName = getAttribute(FILE_NAME_PROPERTY);
+    if (fileName != null) {
+      file = new File(fileName);
+    }
+        
+    parseAndSetPeriod(PERIOD_PROPERTY);
+    String newStyle = getAttribute(NEWSTYLE_PROPERTY);
+    if (null == newStyle) {
+      useNewStyleOutput = DEFAULT_NEW_STYLE;
+    } else if ("true".equals(newStyle)) {
+      useNewStyleOutput = true;
+    } else if ("false".equals(newStyle)) {
+      useNewStyleOutput = false;
+    } else {
+      throw new MetricsException(
+          "Expected true/false for " + NEWSTYLE_PROPERTY + ". Got: " +
+              newStyle);
+    }
+  }
+
+  /**
+   * Returns the configured file name, or null.
+   */
+  @InterfaceAudience.Private
+  public String getFileName() {
+    if (file == null) {
+      return null;
+    } else {
+      return file.getName();
+    }
+  }
+    
+  /**
+   * Starts or restarts monitoring, by opening in append-mode, the
+   * file specified by the <code>fileName</code> attribute,
+   * if specified. Otherwise the data will be written to standard
+   * output.
+   */
+  @InterfaceAudience.Private
+  public void startMonitoring()
+    throws IOException 
+  {
+    if (file == null) {
+      writer = new PrintWriter(new BufferedOutputStream(System.out));
+    } else {
+      writer = new PrintWriter(new FileWriter(file, true));
+    }
+    super.startMonitoring();
+  }
+    
+  /**
+   * Stops monitoring, closing the file.
+   * @see #close()
+   */
+  @InterfaceAudience.Private
+  public void stopMonitoring() {
+    super.stopMonitoring();
+        
+    if (writer != null) {
+      writer.close();
+      writer = null;
+    }
+  }
+    
+  /**
+   * Emit a record to the stream using the currrent output format. 
+   * <p/>
+   * @param contextName context
+   * @param recordName record name to log
+   * @param outRec the record containing the metrics
+   */
+  public void emitRecord(String contextName,
+                         String recordName,
+                         OutputRecord outRec) {
+    if (useNewStyleOutput) {
+      newStyleEmitRecord(contextName, recordName, outRec);
+    } else {
+      oldStyleEmitRecord(contextName, recordName, outRec);
+    }
+  }
+
+  /**
+   * Emit a record to the stream using the new output format. 
+   * <p/>
+   * It is used if {@link #NEWSTYLE_PROPERTY} is
+   * set to true.
+   * @param contextName context
+   * @param recordName record name to log
+   * @param outRec the record containing the metrics
+   */
+  private void newStyleEmitRecord(String contextName,
+                                  String recordName,
+                                  OutputRecord outRec) {
+    long ts = System.currentTimeMillis();
+
+    writer.print("[" + ts + "] ");
+    writer.print(contextName);
+    writer.print(".");
+    writer.print(recordName);
+    writer.print("(");
+
+    String separator = "";
+    for (String tagName : outRec.getTagNames()) {
+      writer.print(separator);
+      separator = ", ";
+      writer.print(tagName);
+      writer.print("=");
+      writer.print(outRec.getTag(tagName));
+    }
+    writer.print(") {");
+
+    separator = "";
+    for (String metricName : outRec.getMetricNames()) {
+      writer.print(separator);
+      separator = ", ";
+      writer.print(metricName);
+      writer.print("=");
+      writer.print(outRec.getMetric(metricName));
+    }
+    writer.println("}");
+  }
+
+  /**
+   * Emit a record to the stream using the old output format. 
+   * <p/>
+   * It is used if {@link #NEWSTYLE_PROPERTY} is
+   * set to false.
+   * @param contextName context
+   * @param recordName record name to log
+   * @param outRec the record containing the metrics
+   */
+  @InterfaceAudience.Private
+  private void oldStyleEmitRecord(String contextName,
+                         String recordName,
+                         OutputRecord outRec) {
+    writer.print(contextName);
+    writer.print(".");
+    writer.print(recordName);
+    String separator = ": ";
+    for (String tagName : outRec.getTagNames()) {
+      writer.print(separator);
+      separator = ", ";
+      writer.print(tagName);
+      writer.print("=");
+      writer.print(outRec.getTag(tagName));
+    }
+    for (String metricName : outRec.getMetricNames()) {
+      writer.print(separator);
+      separator = ", ";
+      writer.print(metricName);
+      writer.print("=");
+      writer.print(outRec.getMetric(metricName));
+    }
+    writer.println();
+  }
+    
+  /**
+   * Flushes the output writer, forcing updates to disk.
+   */
+  @InterfaceAudience.Private
+  public void flush() {
+    writer.flush();
+  }
+}
diff --git a/src/java/org/apache/hadoop/metrics/spi/AbstractMetricsContext.java b/src/java/org/apache/hadoop/metrics/spi/AbstractMetricsContext.java
index 947b0a1..811f7c7 100644
--- a/src/java/org/apache/hadoop/metrics/spi/AbstractMetricsContext.java
+++ b/src/java/org/apache/hadoop/metrics/spi/AbstractMetricsContext.java
@@ -175,6 +175,20 @@ public abstract class AbstractMetricsContext implements MetricsContext {
   }
     
   /**
+   * Forces the context to emit records right now, used from unit tests.
+   *
+   * @throws IOException if {@link #timerEvent()} raises one
+   * @throws IllegalStateException if the context is not monitoring.
+   */
+  @InterfaceAudience.Private
+  public synchronized void emitNowForTests() throws IOException {
+    if (!isMonitoring) {
+      throw new IllegalStateException("Must be monitoring");
+    }
+    timerEvent();
+  }
+    
+  /**
    * Stops monitoring.  This does not free buffered data. 
    * @see #close()
    */
diff --git a/src/test/core/org/apache/hadoop/metrics/file/TestFileContext.java b/src/test/core/org/apache/hadoop/metrics/file/TestFileContext.java
new file mode 100644
index 0000000..e35aed5
--- /dev/null
+++ b/src/test/core/org/apache/hadoop/metrics/file/TestFileContext.java
@@ -0,0 +1,102 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.apache.hadoop.metrics.file;
+
+import java.io.IOException;
+import java.io.FileReader;
+import java.io.BufferedReader;
+import java.util.ArrayList;
+import java.util.Collections;
+
+import junit.framework.TestCase;
+
+import org.apache.hadoop.metrics.ContextFactory;
+import org.apache.hadoop.metrics.MetricsRecord;
+import org.apache.hadoop.metrics.MetricsContext;
+import org.apache.hadoop.metrics.spi.OutputRecord;
+
+public class TestFileContext extends TestCase {
+  FileContext fc;
+
+  private static final String FILE =
+    System.getProperty("test.build.data",".") + "/test.metrics.filecontext";
+
+  private static final String TS_REGEX = "^\\[[0-9]+\\] ";
+
+  /**
+   * Initializes, for testing, two NoEmitMetricsContext's, and adds one value
+   * to the first of them.
+   */
+  public void setUp() throws IOException {
+    ContextFactory f = ContextFactory.getFactory();
+
+    f.setAttribute("test1." + FileContext.FILE_NAME_PROPERTY, FILE);
+    // set period super high so we only emit via our explicit triggering
+    f.setAttribute("test1." + FileContext.PERIOD_PROPERTY,
+                   String.valueOf(Integer.MAX_VALUE / 1000));
+
+    fc = new FileContext();
+    fc.init("test1", f);
+  }
+
+  public void testEmit() throws Exception {
+    fc.startMonitoring();
+
+    // A record with tags and metrics
+    MetricsRecord r = fc.createRecord("testRecord");
+    r.setTag("testTag1", "testTagValue1");
+    r.setTag("testTag2", "testTagValue2");
+    r.setMetric("testMetric1", 1);
+    r.setMetric("testMetric2", 33);
+    r.update();
+
+    // A record with no tags
+    r = fc.createRecord("testRecord2");
+    r.setMetric("testMetric1", 23);
+    r.setMetric("testMetric2", 45);
+    r.update();
+
+    // A record with no metrics or tags
+    r = fc.createRecord("testRecord3");
+    r.update();
+
+
+    fc.emitNowForTests();
+    fc.stopMonitoring();
+
+    ArrayList<String> lines = new ArrayList<String>(3);
+    BufferedReader br = new BufferedReader(new FileReader(FILE));
+    String l;
+    while ((l = br.readLine()) != null) {
+      lines.add(l.replaceFirst(TS_REGEX, "[TS] "));
+    }
+    br.close();
+
+    assertEquals(3, lines.size());
+
+    Collections.sort(lines);
+
+    assertEquals(
+      "[TS] test1.testRecord(testTag1=testTagValue1, testTag2=testTagValue2)" +
+      " {testMetric1=1, testMetric2=33}", lines.get(0));
+    assertEquals(
+      "[TS] test1.testRecord2() {testMetric1=23, testMetric2=45}", lines.get(1));
+    assertEquals(
+      "[TS] test1.testRecord3() {}", lines.get(2));
+  }
+}
